// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Name
//  - Creacnt
//  - Fancnt
//  - Zancnt
//  - Commentcnt
//  - Visitcnt
type User struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  Name string `thrift:"name,2,required" db:"name" json:"name"`
  // unused fields # 3 to 9
  Creacnt int32 `thrift:"creacnt,10,required" db:"creacnt" json:"creacnt"`
  Fancnt int32 `thrift:"fancnt,11,required" db:"fancnt" json:"fancnt"`
  Zancnt int32 `thrift:"zancnt,12,required" db:"zancnt" json:"zancnt"`
  Commentcnt int32 `thrift:"commentcnt,13,required" db:"commentcnt" json:"commentcnt"`
  Visitcnt int32 `thrift:"visitcnt,14,required" db:"visitcnt" json:"visitcnt"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetID() int32 {
  return p.ID
}

func (p *User) GetName() string {
  return p.Name
}

func (p *User) GetCreacnt() int32 {
  return p.Creacnt
}

func (p *User) GetFancnt() int32 {
  return p.Fancnt
}

func (p *User) GetZancnt() int32 {
  return p.Zancnt
}

func (p *User) GetCommentcnt() int32 {
  return p.Commentcnt
}

func (p *User) GetVisitcnt() int32 {
  return p.Visitcnt
}
func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetName bool = false;
  var issetCreacnt bool = false;
  var issetFancnt bool = false;
  var issetZancnt bool = false;
  var issetCommentcnt bool = false;
  var issetVisitcnt bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
        issetCreacnt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
        issetFancnt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
        issetZancnt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
        issetCommentcnt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
        issetVisitcnt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetCreacnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Creacnt is not set"));
  }
  if !issetFancnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Fancnt is not set"));
  }
  if !issetZancnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Zancnt is not set"));
  }
  if !issetCommentcnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Commentcnt is not set"));
  }
  if !issetVisitcnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Visitcnt is not set"));
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *User)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Creacnt = v
}
  return nil
}

func (p *User)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Fancnt = v
}
  return nil
}

func (p *User)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Zancnt = v
}
  return nil
}

func (p *User)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Commentcnt = v
}
  return nil
}

func (p *User)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Visitcnt = v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *User) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creacnt", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:creacnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Creacnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creacnt (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:creacnt: ", p), err) }
  return err
}

func (p *User) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fancnt", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:fancnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Fancnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fancnt (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:fancnt: ", p), err) }
  return err
}

func (p *User) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("zancnt", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:zancnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Zancnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zancnt (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:zancnt: ", p), err) }
  return err
}

func (p *User) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commentcnt", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:commentcnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Commentcnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commentcnt (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:commentcnt: ", p), err) }
  return err
}

func (p *User) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("visitcnt", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:visitcnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Visitcnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.visitcnt (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:visitcnt: ", p), err) }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - Bid
//  - Uname
//  - Iscopy
//  - Tname
//  - Title
//  - Content
//  - Readcnt
//  - Cdate
//  - Ccnt
type Blog struct {
  Bid int32 `thrift:"bid,1,required" db:"bid" json:"bid"`
  Uname string `thrift:"uname,2,required" db:"uname" json:"uname"`
  Iscopy bool `thrift:"iscopy,3,required" db:"iscopy" json:"iscopy"`
  Tname string `thrift:"tname,4,required" db:"tname" json:"tname"`
  // unused fields # 5 to 9
  Title string `thrift:"title,10,required" db:"title" json:"title"`
  Content string `thrift:"content,11,required" db:"content" json:"content"`
  Readcnt int32 `thrift:"readcnt,12,required" db:"readcnt" json:"readcnt"`
  Cdate string `thrift:"cdate,13,required" db:"cdate" json:"cdate"`
  Ccnt int32 `thrift:"ccnt,14,required" db:"ccnt" json:"ccnt"`
}

func NewBlog() *Blog {
  return &Blog{}
}


func (p *Blog) GetBid() int32 {
  return p.Bid
}

func (p *Blog) GetUname() string {
  return p.Uname
}

func (p *Blog) GetIscopy() bool {
  return p.Iscopy
}

func (p *Blog) GetTname() string {
  return p.Tname
}

func (p *Blog) GetTitle() string {
  return p.Title
}

func (p *Blog) GetContent() string {
  return p.Content
}

func (p *Blog) GetReadcnt() int32 {
  return p.Readcnt
}

func (p *Blog) GetCdate() string {
  return p.Cdate
}

func (p *Blog) GetCcnt() int32 {
  return p.Ccnt
}
func (p *Blog) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBid bool = false;
  var issetUname bool = false;
  var issetIscopy bool = false;
  var issetTname bool = false;
  var issetTitle bool = false;
  var issetContent bool = false;
  var issetReadcnt bool = false;
  var issetCdate bool = false;
  var issetCcnt bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetBid = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetUname = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetIscopy = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetTname = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
        issetTitle = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
        issetContent = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
        issetReadcnt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
        issetCdate = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
        issetCcnt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bid is not set"));
  }
  if !issetUname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Uname is not set"));
  }
  if !issetIscopy{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Iscopy is not set"));
  }
  if !issetTname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tname is not set"));
  }
  if !issetTitle{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Title is not set"));
  }
  if !issetContent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Content is not set"));
  }
  if !issetReadcnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Readcnt is not set"));
  }
  if !issetCdate{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Cdate is not set"));
  }
  if !issetCcnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ccnt is not set"));
  }
  return nil
}

func (p *Blog)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Bid = v
}
  return nil
}

func (p *Blog)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Uname = v
}
  return nil
}

func (p *Blog)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Iscopy = v
}
  return nil
}

func (p *Blog)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Tname = v
}
  return nil
}

func (p *Blog)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Blog)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *Blog)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Readcnt = v
}
  return nil
}

func (p *Blog)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Cdate = v
}
  return nil
}

func (p *Blog)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Ccnt = v
}
  return nil
}

func (p *Blog) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Blog"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Blog) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Bid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bid: ", p), err) }
  return err
}

func (p *Blog) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uname: ", p), err) }
  if err := oprot.WriteString(string(p.Uname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uname: ", p), err) }
  return err
}

func (p *Blog) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iscopy", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:iscopy: ", p), err) }
  if err := oprot.WriteBool(bool(p.Iscopy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iscopy (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:iscopy: ", p), err) }
  return err
}

func (p *Blog) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tname", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tname: ", p), err) }
  if err := oprot.WriteString(string(p.Tname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tname (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tname: ", p), err) }
  return err
}

func (p *Blog) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:title: ", p), err) }
  return err
}

func (p *Blog) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:content: ", p), err) }
  return err
}

func (p *Blog) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("readcnt", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:readcnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Readcnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readcnt (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:readcnt: ", p), err) }
  return err
}

func (p *Blog) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cdate", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:cdate: ", p), err) }
  if err := oprot.WriteString(string(p.Cdate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cdate (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:cdate: ", p), err) }
  return err
}

func (p *Blog) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ccnt", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:ccnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Ccnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ccnt (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:ccnt: ", p), err) }
  return err
}

func (p *Blog) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Blog(%+v)", *p)
}

// Attributes:
//  - UID
//  - Tid
//  - Tname
type Tag struct {
  UID int32 `thrift:"uid,1,required" db:"uid" json:"uid"`
  Tid int32 `thrift:"tid,2,required" db:"tid" json:"tid"`
  // unused fields # 3 to 9
  Tname string `thrift:"tname,10,required" db:"tname" json:"tname"`
}

func NewTag() *Tag {
  return &Tag{}
}


func (p *Tag) GetUID() int32 {
  return p.UID
}

func (p *Tag) GetTid() int32 {
  return p.Tid
}

func (p *Tag) GetTname() string {
  return p.Tname
}
func (p *Tag) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetUID bool = false;
  var issetTid bool = false;
  var issetTname bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetUID = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetTid = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
        issetTname = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetUID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UID is not set"));
  }
  if !issetTid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tid is not set"));
  }
  if !issetTname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tname is not set"));
  }
  return nil
}

func (p *Tag)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *Tag)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tid = v
}
  return nil
}

func (p *Tag)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Tname = v
}
  return nil
}

func (p *Tag) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Tag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Tag) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI32(int32(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *Tag) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Tid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tid: ", p), err) }
  return err
}

func (p *Tag) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tname", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tname: ", p), err) }
  if err := oprot.WriteString(string(p.Tname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tname (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tname: ", p), err) }
  return err
}

func (p *Tag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Tag(%+v)", *p)
}

// Attributes:
//  - Bid
//  - Uname
//  - Content
//  - Date
//  - Zancnt
type Comment struct {
  Bid int32 `thrift:"bid,1,required" db:"bid" json:"bid"`
  Uname string `thrift:"uname,2,required" db:"uname" json:"uname"`
  Content string `thrift:"content,3,required" db:"content" json:"content"`
  // unused fields # 4 to 9
  Date string `thrift:"date,10,required" db:"date" json:"date"`
  // unused field # 11
  Zancnt int32 `thrift:"zancnt,12,required" db:"zancnt" json:"zancnt"`
}

func NewComment() *Comment {
  return &Comment{}
}


func (p *Comment) GetBid() int32 {
  return p.Bid
}

func (p *Comment) GetUname() string {
  return p.Uname
}

func (p *Comment) GetContent() string {
  return p.Content
}

func (p *Comment) GetDate() string {
  return p.Date
}

func (p *Comment) GetZancnt() int32 {
  return p.Zancnt
}
func (p *Comment) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBid bool = false;
  var issetUname bool = false;
  var issetContent bool = false;
  var issetDate bool = false;
  var issetZancnt bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetBid = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetUname = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetContent = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
        issetDate = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
        issetZancnt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bid is not set"));
  }
  if !issetUname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Uname is not set"));
  }
  if !issetContent{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Content is not set"));
  }
  if !issetDate{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Date is not set"));
  }
  if !issetZancnt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Zancnt is not set"));
  }
  return nil
}

func (p *Comment)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Bid = v
}
  return nil
}

func (p *Comment)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Uname = v
}
  return nil
}

func (p *Comment)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *Comment)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Date = v
}
  return nil
}

func (p *Comment)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Zancnt = v
}
  return nil
}

func (p *Comment) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Comment"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Comment) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bid", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Bid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bid: ", p), err) }
  return err
}

func (p *Comment) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uname: ", p), err) }
  if err := oprot.WriteString(string(p.Uname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uname: ", p), err) }
  return err
}

func (p *Comment) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:content: ", p), err) }
  return err
}

func (p *Comment) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("date", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:date: ", p), err) }
  if err := oprot.WriteString(string(p.Date)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.date (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:date: ", p), err) }
  return err
}

func (p *Comment) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("zancnt", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:zancnt: ", p), err) }
  if err := oprot.WriteI32(int32(p.Zancnt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zancnt (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:zancnt: ", p), err) }
  return err
}

func (p *Comment) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Comment(%+v)", *p)
}

// Attributes:
//  - I
type Intreq struct {
  I int32 `thrift:"i,1,required" db:"i" json:"i"`
}

func NewIntreq() *Intreq {
  return &Intreq{}
}


func (p *Intreq) GetI() int32 {
  return p.I
}
func (p *Intreq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetI bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetI = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetI{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field I is not set"));
  }
  return nil
}

func (p *Intreq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.I = v
}
  return nil
}

func (p *Intreq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Intreq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Intreq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
  if err := oprot.WriteI32(int32(p.I)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  return err
}

func (p *Intreq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Intreq(%+v)", *p)
}

// Attributes:
//  - I1
//  - I2
type Int2req struct {
  I1 int32 `thrift:"i1,1,required" db:"i1" json:"i1"`
  I2 int32 `thrift:"i2,2,required" db:"i2" json:"i2"`
}

func NewInt2req() *Int2req {
  return &Int2req{}
}


func (p *Int2req) GetI1() int32 {
  return p.I1
}

func (p *Int2req) GetI2() int32 {
  return p.I2
}
func (p *Int2req) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetI1 bool = false;
  var issetI2 bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetI1 = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetI2 = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetI1{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field I1 is not set"));
  }
  if !issetI2{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field I2 is not set"));
  }
  return nil
}

func (p *Int2req)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.I1 = v
}
  return nil
}

func (p *Int2req)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.I2 = v
}
  return nil
}

func (p *Int2req) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Int2req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Int2req) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i1: ", p), err) }
  if err := oprot.WriteI32(int32(p.I1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i1: ", p), err) }
  return err
}

func (p *Int2req) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:i2: ", p), err) }
  if err := oprot.WriteI32(int32(p.I2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:i2: ", p), err) }
  return err
}

func (p *Int2req) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Int2req(%+v)", *p)
}

// Attributes:
//  - S
type Stringreq struct {
  S string `thrift:"s,1,required" db:"s" json:"s"`
}

func NewStringreq() *Stringreq {
  return &Stringreq{}
}


func (p *Stringreq) GetS() string {
  return p.S
}
func (p *Stringreq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetS bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetS = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetS{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field S is not set"));
  }
  return nil
}

func (p *Stringreq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.S = v
}
  return nil
}

func (p *Stringreq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Stringreq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Stringreq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := oprot.WriteString(string(p.S)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *Stringreq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Stringreq(%+v)", *p)
}

type UserService interface {
  // Parameters:
  //  - S
  GetUserInfo(ctx context.Context, s *Stringreq) (r *User, err error)
}

type UserServiceClient struct {
  c thrift.TClient
}

func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
  return &UserServiceClient{
    c: c,
  }
}

func (p *UserServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - S
func (p *UserServiceClient) GetUserInfo(ctx context.Context, s *Stringreq) (r *User, err error) {
  var _args0 UserServiceGetUserInfoArgs
  _args0.S = s
  var _result1 UserServiceGetUserInfoResult
  if err = p.Client_().Call(ctx, "GetUserInfo", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type UserServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserService
}

func (p *UserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {

  self2 := &UserServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["GetUserInfo"] = &userServiceProcessorGetUserInfo{handler:handler}
return self2
}

func (p *UserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type userServiceProcessorGetUserInfo struct {
  handler UserService
}

func (p *userServiceProcessorGetUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceGetUserInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceGetUserInfoResult{}
var retval *User
  var err2 error
  if retval, err2 = p.handler.GetUserInfo(ctx, args.S); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetUserInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUserInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - S
type UserServiceGetUserInfoArgs struct {
  S *Stringreq `thrift:"s,1" db:"s" json:"s"`
}

func NewUserServiceGetUserInfoArgs() *UserServiceGetUserInfoArgs {
  return &UserServiceGetUserInfoArgs{}
}

var UserServiceGetUserInfoArgs_S_DEFAULT *Stringreq
func (p *UserServiceGetUserInfoArgs) GetS() *Stringreq {
  if !p.IsSetS() {
    return UserServiceGetUserInfoArgs_S_DEFAULT
  }
return p.S
}
func (p *UserServiceGetUserInfoArgs) IsSetS() bool {
  return p.S != nil
}

func (p *UserServiceGetUserInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.S = &Stringreq{}
  if err := p.S.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := p.S.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *UserServiceGetUserInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceGetUserInfoResult struct {
  Success *User `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoResult() *UserServiceGetUserInfoResult {
  return &UserServiceGetUserInfoResult{}
}

var UserServiceGetUserInfoResult_Success_DEFAULT *User
func (p *UserServiceGetUserInfoResult) GetSuccess() *User {
  if !p.IsSetSuccess() {
    return UserServiceGetUserInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceGetUserInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceGetUserInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &User{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserInfoResult(%+v)", *p)
}


type TagService interface {
  // Parameters:
  //  - I
  GetTagsByUID(ctx context.Context, i *Intreq) (r []*Tag, err error)
}

type TagServiceClient struct {
  c thrift.TClient
}

func NewTagServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TagServiceClient {
  return &TagServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTagServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TagServiceClient {
  return &TagServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTagServiceClient(c thrift.TClient) *TagServiceClient {
  return &TagServiceClient{
    c: c,
  }
}

func (p *TagServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - I
func (p *TagServiceClient) GetTagsByUID(ctx context.Context, i *Intreq) (r []*Tag, err error) {
  var _args10 TagServiceGetTagsByUIDArgs
  _args10.I = i
  var _result11 TagServiceGetTagsByUIDResult
  if err = p.Client_().Call(ctx, "GetTagsByUID", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type TagServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TagService
}

func (p *TagServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TagServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TagServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTagServiceProcessor(handler TagService) *TagServiceProcessor {

  self12 := &TagServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["GetTagsByUID"] = &tagServiceProcessorGetTagsByUID{handler:handler}
return self12
}

func (p *TagServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type tagServiceProcessorGetTagsByUID struct {
  handler TagService
}

func (p *tagServiceProcessorGetTagsByUID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TagServiceGetTagsByUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetTagsByUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TagServiceGetTagsByUIDResult{}
var retval []*Tag
  var err2 error
  if retval, err2 = p.handler.GetTagsByUID(ctx, args.I); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTagsByUID: " + err2.Error())
    oprot.WriteMessageBegin("GetTagsByUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetTagsByUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - I
type TagServiceGetTagsByUIDArgs struct {
  I *Intreq `thrift:"i,1" db:"i" json:"i"`
}

func NewTagServiceGetTagsByUIDArgs() *TagServiceGetTagsByUIDArgs {
  return &TagServiceGetTagsByUIDArgs{}
}

var TagServiceGetTagsByUIDArgs_I_DEFAULT *Intreq
func (p *TagServiceGetTagsByUIDArgs) GetI() *Intreq {
  if !p.IsSetI() {
    return TagServiceGetTagsByUIDArgs_I_DEFAULT
  }
return p.I
}
func (p *TagServiceGetTagsByUIDArgs) IsSetI() bool {
  return p.I != nil
}

func (p *TagServiceGetTagsByUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagServiceGetTagsByUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.I = &Intreq{}
  if err := p.I.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I), err)
  }
  return nil
}

func (p *TagServiceGetTagsByUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTagsByUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagServiceGetTagsByUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
  if err := p.I.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  return err
}

func (p *TagServiceGetTagsByUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagServiceGetTagsByUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TagServiceGetTagsByUIDResult struct {
  Success []*Tag `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTagServiceGetTagsByUIDResult() *TagServiceGetTagsByUIDResult {
  return &TagServiceGetTagsByUIDResult{}
}

var TagServiceGetTagsByUIDResult_Success_DEFAULT []*Tag

func (p *TagServiceGetTagsByUIDResult) GetSuccess() []*Tag {
  return p.Success
}
func (p *TagServiceGetTagsByUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TagServiceGetTagsByUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagServiceGetTagsByUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Tag, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &Tag{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TagServiceGetTagsByUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTagsByUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagServiceGetTagsByUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TagServiceGetTagsByUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagServiceGetTagsByUIDResult(%+v)", *p)
}


type BlogService interface {
  // Parameters:
  //  - I
  GetBlogsByTIDAndUID(ctx context.Context, i *Int2req) (r []*Blog, err error)
  // Parameters:
  //  - I
  GetBlogsByUid(ctx context.Context, i *Intreq) (r []*Blog, err error)
  // Parameters:
  //  - I
  GetBlogById(ctx context.Context, i *Intreq) (r *Blog, err error)
}

type BlogServiceClient struct {
  c thrift.TClient
}

func NewBlogServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BlogServiceClient {
  return &BlogServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBlogServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BlogServiceClient {
  return &BlogServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBlogServiceClient(c thrift.TClient) *BlogServiceClient {
  return &BlogServiceClient{
    c: c,
  }
}

func (p *BlogServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - I
func (p *BlogServiceClient) GetBlogsByTIDAndUID(ctx context.Context, i *Int2req) (r []*Blog, err error) {
  var _args21 BlogServiceGetBlogsByTIDAndUIDArgs
  _args21.I = i
  var _result22 BlogServiceGetBlogsByTIDAndUIDResult
  if err = p.Client_().Call(ctx, "GetBlogsByTIDAndUID", &_args21, &_result22); err != nil {
    return
  }
  return _result22.GetSuccess(), nil
}

// Parameters:
//  - I
func (p *BlogServiceClient) GetBlogsByUid(ctx context.Context, i *Intreq) (r []*Blog, err error) {
  var _args23 BlogServiceGetBlogsByUidArgs
  _args23.I = i
  var _result24 BlogServiceGetBlogsByUidResult
  if err = p.Client_().Call(ctx, "GetBlogsByUid", &_args23, &_result24); err != nil {
    return
  }
  return _result24.GetSuccess(), nil
}

// Parameters:
//  - I
func (p *BlogServiceClient) GetBlogById(ctx context.Context, i *Intreq) (r *Blog, err error) {
  var _args25 BlogServiceGetBlogByIdArgs
  _args25.I = i
  var _result26 BlogServiceGetBlogByIdResult
  if err = p.Client_().Call(ctx, "GetBlogById", &_args25, &_result26); err != nil {
    return
  }
  return _result26.GetSuccess(), nil
}

type BlogServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BlogService
}

func (p *BlogServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BlogServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BlogServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBlogServiceProcessor(handler BlogService) *BlogServiceProcessor {

  self27 := &BlogServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self27.processorMap["GetBlogsByTIDAndUID"] = &blogServiceProcessorGetBlogsByTIDAndUID{handler:handler}
  self27.processorMap["GetBlogsByUid"] = &blogServiceProcessorGetBlogsByUid{handler:handler}
  self27.processorMap["GetBlogById"] = &blogServiceProcessorGetBlogById{handler:handler}
return self27
}

func (p *BlogServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x28 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x28.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x28

}

type blogServiceProcessorGetBlogsByTIDAndUID struct {
  handler BlogService
}

func (p *blogServiceProcessorGetBlogsByTIDAndUID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BlogServiceGetBlogsByTIDAndUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetBlogsByTIDAndUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BlogServiceGetBlogsByTIDAndUIDResult{}
var retval []*Blog
  var err2 error
  if retval, err2 = p.handler.GetBlogsByTIDAndUID(ctx, args.I); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBlogsByTIDAndUID: " + err2.Error())
    oprot.WriteMessageBegin("GetBlogsByTIDAndUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetBlogsByTIDAndUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type blogServiceProcessorGetBlogsByUid struct {
  handler BlogService
}

func (p *blogServiceProcessorGetBlogsByUid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BlogServiceGetBlogsByUidArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetBlogsByUid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BlogServiceGetBlogsByUidResult{}
var retval []*Blog
  var err2 error
  if retval, err2 = p.handler.GetBlogsByUid(ctx, args.I); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBlogsByUid: " + err2.Error())
    oprot.WriteMessageBegin("GetBlogsByUid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetBlogsByUid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type blogServiceProcessorGetBlogById struct {
  handler BlogService
}

func (p *blogServiceProcessorGetBlogById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BlogServiceGetBlogByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetBlogById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BlogServiceGetBlogByIdResult{}
var retval *Blog
  var err2 error
  if retval, err2 = p.handler.GetBlogById(ctx, args.I); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBlogById: " + err2.Error())
    oprot.WriteMessageBegin("GetBlogById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetBlogById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - I
type BlogServiceGetBlogsByTIDAndUIDArgs struct {
  I *Int2req `thrift:"i,1" db:"i" json:"i"`
}

func NewBlogServiceGetBlogsByTIDAndUIDArgs() *BlogServiceGetBlogsByTIDAndUIDArgs {
  return &BlogServiceGetBlogsByTIDAndUIDArgs{}
}

var BlogServiceGetBlogsByTIDAndUIDArgs_I_DEFAULT *Int2req
func (p *BlogServiceGetBlogsByTIDAndUIDArgs) GetI() *Int2req {
  if !p.IsSetI() {
    return BlogServiceGetBlogsByTIDAndUIDArgs_I_DEFAULT
  }
return p.I
}
func (p *BlogServiceGetBlogsByTIDAndUIDArgs) IsSetI() bool {
  return p.I != nil
}

func (p *BlogServiceGetBlogsByTIDAndUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceGetBlogsByTIDAndUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.I = &Int2req{}
  if err := p.I.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I), err)
  }
  return nil
}

func (p *BlogServiceGetBlogsByTIDAndUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlogsByTIDAndUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceGetBlogsByTIDAndUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
  if err := p.I.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  return err
}

func (p *BlogServiceGetBlogsByTIDAndUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceGetBlogsByTIDAndUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlogServiceGetBlogsByTIDAndUIDResult struct {
  Success []*Blog `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBlogServiceGetBlogsByTIDAndUIDResult() *BlogServiceGetBlogsByTIDAndUIDResult {
  return &BlogServiceGetBlogsByTIDAndUIDResult{}
}

var BlogServiceGetBlogsByTIDAndUIDResult_Success_DEFAULT []*Blog

func (p *BlogServiceGetBlogsByTIDAndUIDResult) GetSuccess() []*Blog {
  return p.Success
}
func (p *BlogServiceGetBlogsByTIDAndUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BlogServiceGetBlogsByTIDAndUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceGetBlogsByTIDAndUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Blog, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &Blog{}
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Success = append(p.Success, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BlogServiceGetBlogsByTIDAndUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlogsByTIDAndUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceGetBlogsByTIDAndUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BlogServiceGetBlogsByTIDAndUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceGetBlogsByTIDAndUIDResult(%+v)", *p)
}

// Attributes:
//  - I
type BlogServiceGetBlogsByUidArgs struct {
  I *Intreq `thrift:"i,1" db:"i" json:"i"`
}

func NewBlogServiceGetBlogsByUidArgs() *BlogServiceGetBlogsByUidArgs {
  return &BlogServiceGetBlogsByUidArgs{}
}

var BlogServiceGetBlogsByUidArgs_I_DEFAULT *Intreq
func (p *BlogServiceGetBlogsByUidArgs) GetI() *Intreq {
  if !p.IsSetI() {
    return BlogServiceGetBlogsByUidArgs_I_DEFAULT
  }
return p.I
}
func (p *BlogServiceGetBlogsByUidArgs) IsSetI() bool {
  return p.I != nil
}

func (p *BlogServiceGetBlogsByUidArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceGetBlogsByUidArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.I = &Intreq{}
  if err := p.I.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I), err)
  }
  return nil
}

func (p *BlogServiceGetBlogsByUidArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlogsByUid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceGetBlogsByUidArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
  if err := p.I.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  return err
}

func (p *BlogServiceGetBlogsByUidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceGetBlogsByUidArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlogServiceGetBlogsByUidResult struct {
  Success []*Blog `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBlogServiceGetBlogsByUidResult() *BlogServiceGetBlogsByUidResult {
  return &BlogServiceGetBlogsByUidResult{}
}

var BlogServiceGetBlogsByUidResult_Success_DEFAULT []*Blog

func (p *BlogServiceGetBlogsByUidResult) GetSuccess() []*Blog {
  return p.Success
}
func (p *BlogServiceGetBlogsByUidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BlogServiceGetBlogsByUidResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceGetBlogsByUidResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Blog, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &Blog{}
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Success = append(p.Success, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BlogServiceGetBlogsByUidResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlogsByUid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceGetBlogsByUidResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BlogServiceGetBlogsByUidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceGetBlogsByUidResult(%+v)", *p)
}

// Attributes:
//  - I
type BlogServiceGetBlogByIdArgs struct {
  I *Intreq `thrift:"i,1" db:"i" json:"i"`
}

func NewBlogServiceGetBlogByIdArgs() *BlogServiceGetBlogByIdArgs {
  return &BlogServiceGetBlogByIdArgs{}
}

var BlogServiceGetBlogByIdArgs_I_DEFAULT *Intreq
func (p *BlogServiceGetBlogByIdArgs) GetI() *Intreq {
  if !p.IsSetI() {
    return BlogServiceGetBlogByIdArgs_I_DEFAULT
  }
return p.I
}
func (p *BlogServiceGetBlogByIdArgs) IsSetI() bool {
  return p.I != nil
}

func (p *BlogServiceGetBlogByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceGetBlogByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.I = &Intreq{}
  if err := p.I.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I), err)
  }
  return nil
}

func (p *BlogServiceGetBlogByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlogById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceGetBlogByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
  if err := p.I.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  return err
}

func (p *BlogServiceGetBlogByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceGetBlogByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlogServiceGetBlogByIdResult struct {
  Success *Blog `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBlogServiceGetBlogByIdResult() *BlogServiceGetBlogByIdResult {
  return &BlogServiceGetBlogByIdResult{}
}

var BlogServiceGetBlogByIdResult_Success_DEFAULT *Blog
func (p *BlogServiceGetBlogByIdResult) GetSuccess() *Blog {
  if !p.IsSetSuccess() {
    return BlogServiceGetBlogByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *BlogServiceGetBlogByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BlogServiceGetBlogByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceGetBlogByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Blog{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BlogServiceGetBlogByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlogById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceGetBlogByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BlogServiceGetBlogByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceGetBlogByIdResult(%+v)", *p)
}


type CommentService interface {
  // Parameters:
  //  - I
  GetCommentListByBID(ctx context.Context, i *Intreq) (r []*Comment, err error)
}

type CommentServiceClient struct {
  c thrift.TClient
}

func NewCommentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CommentServiceClient {
  return &CommentServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCommentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CommentServiceClient {
  return &CommentServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCommentServiceClient(c thrift.TClient) *CommentServiceClient {
  return &CommentServiceClient{
    c: c,
  }
}

func (p *CommentServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - I
func (p *CommentServiceClient) GetCommentListByBID(ctx context.Context, i *Intreq) (r []*Comment, err error) {
  var _args49 CommentServiceGetCommentListByBIDArgs
  _args49.I = i
  var _result50 CommentServiceGetCommentListByBIDResult
  if err = p.Client_().Call(ctx, "GetCommentListByBID", &_args49, &_result50); err != nil {
    return
  }
  return _result50.GetSuccess(), nil
}

type CommentServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CommentService
}

func (p *CommentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CommentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CommentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCommentServiceProcessor(handler CommentService) *CommentServiceProcessor {

  self51 := &CommentServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self51.processorMap["GetCommentListByBID"] = &commentServiceProcessorGetCommentListByBID{handler:handler}
return self51
}

func (p *CommentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x52 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x52.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x52

}

type commentServiceProcessorGetCommentListByBID struct {
  handler CommentService
}

func (p *commentServiceProcessorGetCommentListByBID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CommentServiceGetCommentListByBIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetCommentListByBID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CommentServiceGetCommentListByBIDResult{}
var retval []*Comment
  var err2 error
  if retval, err2 = p.handler.GetCommentListByBID(ctx, args.I); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCommentListByBID: " + err2.Error())
    oprot.WriteMessageBegin("GetCommentListByBID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetCommentListByBID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - I
type CommentServiceGetCommentListByBIDArgs struct {
  I *Intreq `thrift:"i,1" db:"i" json:"i"`
}

func NewCommentServiceGetCommentListByBIDArgs() *CommentServiceGetCommentListByBIDArgs {
  return &CommentServiceGetCommentListByBIDArgs{}
}

var CommentServiceGetCommentListByBIDArgs_I_DEFAULT *Intreq
func (p *CommentServiceGetCommentListByBIDArgs) GetI() *Intreq {
  if !p.IsSetI() {
    return CommentServiceGetCommentListByBIDArgs_I_DEFAULT
  }
return p.I
}
func (p *CommentServiceGetCommentListByBIDArgs) IsSetI() bool {
  return p.I != nil
}

func (p *CommentServiceGetCommentListByBIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommentServiceGetCommentListByBIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.I = &Intreq{}
  if err := p.I.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I), err)
  }
  return nil
}

func (p *CommentServiceGetCommentListByBIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCommentListByBID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommentServiceGetCommentListByBIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("i", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
  if err := p.I.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  return err
}

func (p *CommentServiceGetCommentListByBIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommentServiceGetCommentListByBIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CommentServiceGetCommentListByBIDResult struct {
  Success []*Comment `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCommentServiceGetCommentListByBIDResult() *CommentServiceGetCommentListByBIDResult {
  return &CommentServiceGetCommentListByBIDResult{}
}

var CommentServiceGetCommentListByBIDResult_Success_DEFAULT []*Comment

func (p *CommentServiceGetCommentListByBIDResult) GetSuccess() []*Comment {
  return p.Success
}
func (p *CommentServiceGetCommentListByBIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CommentServiceGetCommentListByBIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommentServiceGetCommentListByBIDResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Comment, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem53 := &Comment{}
    if err := _elem53.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
    }
    p.Success = append(p.Success, _elem53)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CommentServiceGetCommentListByBIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCommentListByBID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommentServiceGetCommentListByBIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CommentServiceGetCommentListByBIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommentServiceGetCommentListByBIDResult(%+v)", *p)
}


